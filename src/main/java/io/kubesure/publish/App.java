/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.kubesure.publish;

import java.io.IOException;
import java.util.logging.Logger;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.kubesure.publish.PublisherGrpc.PublisherImplBase;
import io.kubesure.publish.PublisherProtos.Ack;
import io.kubesure.publish.PublisherProtos.Message;
import io.kubesure.publish.PublisherProtos.Ack.Builder;

public class App {

    private static final Logger logger = Logger.getLogger(App.class.getName());

    private Server server;

    private void start() throws IOException {
        int port = 50051;
        server = ServerBuilder.forPort(port).addService(new PublisherImpl()).build().start();
        logger.info("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                logger.info("*** shutting down gRPC server since JVM is shutting down");
                App.this.stop();
                logger.info("*** server shut down");
            }
        });
    }

    private void stop() {
        if (server != null) {
            server.shutdown();
        }
    }

    /**
     * Await termination on the main thread since the grpc library uses daemon
     * threads.
     */
    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    static class PublisherImpl extends PublisherImplBase {
        @Override
        public void publish(Message request, io.grpc.stub.StreamObserver<Ack> responseObserver) {
            logger.info("payload : " + request.getPayload());
            logger.info("destination : " + request.getDestination());
            String topic = request.getDestination();
            KafkaMessage kafka = new KafkaMessage(topic, request.getPayload(), true);
            kafka.start();
            Builder aBuilder = Ack.newBuilder();
            aBuilder.setOk(true);
            aBuilder.setOffset(kafka.getOffset());
            Ack ack = aBuilder.build();
            responseObserver.onNext(ack);
            responseObserver.onCompleted();
        }
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        final App server = new App();
        server.start();
        server.blockUntilShutdown();
    }
}
