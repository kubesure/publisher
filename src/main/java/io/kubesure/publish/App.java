/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.kubesure.publish;

import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Logger;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.services.HealthStatusManager;
import io.kubesure.publish.PublisherGrpc.PublisherImplBase;
import io.kubesure.publish.PublisherProtos.Ack;
import io.kubesure.publish.PublisherProtos.Ack.Builder;
import io.kubesure.publish.PublisherProtos.Message;

public class App {

    private static final Logger logger = Logger.getLogger(App.class.getName());

    private Server server;

    private void start() throws IOException {
        int port = 50051;
        //server = ServerBuilder.forPort(port).addService(new PublisherImpl()).build().start();
        ServerBuilder sBuilder = ServerBuilder.forPort(port);
        sBuilder.addService(new PublisherImpl());
        sBuilder.addService(new HealthStatusManager().getHealthService());
        server = sBuilder.build();
        server.start();
        logger.info("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                logger.info("*** shutting down gRPC server since JVM is shutting down");
                App.this.stop();
                logger.info("*** server shut down");
            }
        });
    }

    private void stop() {
        if (server != null) {
            server.shutdown();
        }
    }

    /**
     * Await termination on the main thread since the grpc library uses daemon
     * threads.
     */
    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    static class PublisherImpl extends PublisherImplBase {

        @Override
        public void publish(Message request, io.grpc.stub.StreamObserver<Ack> responseObserver) {
            Builder aBuilder = Ack.newBuilder();
            Ack ack;
            try {
                logger.info("payload : " + request.getPayload());
                logger.info("destination : " + request.getDestination());
                MessageMetaData metaData = new MessageMetaData();
                metaData.setIsAsync(false);
                metaData.setMessage(request.getPayload());
                metaData.setTopic(request.getDestination());
                metaData.setKafkaBrokerUrl(this.getBrokerURL());
                KafkaMessage kafka = new KafkaMessage(metaData);
                kafka.start();
                aBuilder.setOk(true);
                aBuilder.setOffset(kafka.getOffset());
                ack = aBuilder.build();
                responseObserver.onNext(ack);
                responseObserver.onCompleted();
            } catch (Exception e) {
                aBuilder.setOk(false);
                ack = aBuilder.build();
                responseObserver.onCompleted();
                logger.severe(e.getMessage());
            }
        }

        private String getBrokerURL() throws IOException {
            try {
                String appConfigLocation = System.getenv("APP_CONFIG_FILE");
                logger.info(appConfigLocation);
                Properties appProps = new Properties();
                InputStream in = null;
                if (appConfigLocation != null && appConfigLocation.length() != 0) {
                    FileReader reader = new FileReader(appConfigLocation);
                    appProps.load(reader);
                } else {
                    in = this.getClass().getClassLoader().getResourceAsStream("application.properties");
                    appProps = new Properties();
                    appProps.load(in);
                }
                logger.info(appProps.getProperty("KAFKA_SERVER"));
                return appProps.getProperty("KAFKA_SERVER") + ":" + appProps.getProperty("KAFKA_SERVER_PORT");
            } catch (IOException e) {
                logger.severe("error loading properties file from classpath");
                e.printStackTrace();
                throw e;
            }
        }
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        final App server = new App();
        server.start();
        server.blockUntilShutdown();
    }
}